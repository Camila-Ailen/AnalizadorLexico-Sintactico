
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 27 13:46:20 ART 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 27 13:46:20 ART 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\010\000\002\003" +
    "\006\000\002\004\003\000\002\004\005\000\002\005\010" +
    "\000\002\005\002\000\002\006\003\000\002\007\005\000" +
    "\002\007\002\000\002\010\005\000\002\011\010\000\002" +
    "\012\005\000\002\012\002\000\002\013\005\000\002\013" +
    "\007\000\002\014\005\000\002\015\003\000\002\015\005" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\010\000\002\017\003\000\002\017\006\000\002" +
    "\020\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\005\000\002\021\005\000\002\022\003\000\002\022\006" +
    "\000\002\022\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\004\004\001\002\000\004\025\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\024\017\001\002\000\004\022\011\001\002\000" +
    "\004\025\013\001\002\000\006\016\014\023\015\001\002" +
    "\000\010\016\ufffe\021\ufffe\023\ufffe\001\002\000\004\025" +
    "\016\001\002\000\004\024\uffff\001\002\000\010\016\ufffd" +
    "\021\ufffd\023\ufffd\001\002\000\010\005\ufffb\007\ufffb\010" +
    "\ufffb\001\002\000\010\005\ufff8\007\022\010\ufff8\001\002" +
    "\000\006\005\033\010\030\001\002\000\004\025\013\001" +
    "\002\000\006\016\014\021\024\001\002\000\004\011\026" +
    "\001\002\000\004\024\027\001\002\000\006\023\ufffa\024" +
    "\ufffa\001\002\000\010\005\ufffc\007\ufffc\010\ufffc\001\002" +
    "\000\004\025\101\001\002\000\006\005\ufffb\007\ufffb\001" +
    "\002\000\004\024\076\001\002\000\010\005\033\012\036" +
    "\025\040\001\002\000\004\002\000\001\002\000\006\006" +
    "\074\024\073\001\002\000\006\025\050\026\045\001\002" +
    "\000\006\006\ufff0\024\ufff0\001\002\000\014\006\uffea\014" +
    "\uffea\020\044\022\043\024\uffea\001\002\000\010\006\uffed" +
    "\014\uffed\024\uffed\001\002\000\010\006\uffec\014\uffec\024" +
    "\uffec\001\002\000\006\025\050\026\045\001\002\000\006" +
    "\025\050\026\045\001\002\000\022\006\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\023\uffe1\024\uffe1\001\002" +
    "\000\022\006\uffe6\013\uffe6\014\uffe6\015\057\016\uffe6\017" +
    "\061\023\uffe6\024\uffe6\001\002\000\010\006\uffee\014\uffee" +
    "\024\uffee\001\002\000\024\006\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\022\051\023\uffe3\024\uffe3\001\002" +
    "\000\006\025\050\026\045\001\002\000\006\016\054\023" +
    "\055\001\002\000\006\016\uffe8\023\uffe8\001\002\000\006" +
    "\025\050\026\045\001\002\000\022\006\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\023\uffe2\024\uffe2\001\002" +
    "\000\006\016\uffe7\023\uffe7\001\002\000\006\025\uffe0\026" +
    "\uffe0\001\002\000\006\025\050\026\045\001\002\000\006" +
    "\025\050\026\045\001\002\000\016\006\uffe5\013\uffe5\014" +
    "\uffe5\016\uffe5\023\uffe5\024\uffe5\001\002\000\016\006\uffe4" +
    "\013\uffe4\014\uffe4\016\uffe4\023\uffe4\024\uffe4\001\002\000" +
    "\006\016\054\023\065\001\002\000\010\006\uffe9\014\uffe9" +
    "\024\uffe9\001\002\000\004\013\067\001\002\000\010\005" +
    "\033\012\036\025\040\001\002\000\004\014\071\001\002" +
    "\000\010\005\033\012\036\025\040\001\002\000\010\006" +
    "\uffeb\014\uffeb\024\uffeb\001\002\000\010\005\033\012\036" +
    "\025\040\001\002\000\012\002\ufff1\006\ufff1\014\ufff1\024" +
    "\ufff1\001\002\000\006\006\uffef\024\uffef\001\002\000\006" +
    "\005\ufff9\010\ufff9\001\002\000\006\005\033\007\022\001" +
    "\002\000\004\024\ufff7\001\002\000\006\021\ufff4\022\102" +
    "\001\002\000\004\025\013\001\002\000\004\021\104\001" +
    "\002\000\004\011\026\001\002\000\004\024\106\001\002" +
    "\000\006\005\ufff6\007\ufff6\001\002\000\006\016\014\021" +
    "\116\001\002\000\006\023\112\024\111\001\002\000\004" +
    "\025\013\001\002\000\004\021\ufff5\001\002\000\006\016" +
    "\014\021\114\001\002\000\004\011\026\001\002\000\006" +
    "\023\ufff2\024\ufff2\001\002\000\004\011\026\001\002\000" +
    "\006\023\ufff3\024\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\017\001\001\000\004\007" +
    "\020\001\001\000\010\010\031\011\030\014\033\001\001" +
    "\000\004\004\022\001\001\000\002\001\001\000\004\006" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\076\001\001\000" +
    "\002\001\001\000\012\014\041\015\034\016\036\017\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\065\022\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\063\021" +
    "\052\022\045\001\001\000\006\021\046\022\045\001\001" +
    "\000\002\001\001\000\004\023\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\051\021\052\022\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\055\022\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\062\001\001\000\004\022" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\041\016\067\017\040\001\001\000\002\001\001\000\010" +
    "\014\041\016\071\017\040\001\001\000\002\001\001\000" +
    "\010\014\041\016\074\017\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\077\001" +
    "\001\000\002\001\001\000\004\012\102\001\001\000\006" +
    "\004\106\013\107\001\001\000\002\001\001\000\004\006" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\114\001\001" +
    "\000\002\001\001\000\004\006\116\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FACTOR ::= Identificador Parentesis_Abierto LISTA_EXPRESIONES Parentesis_Cerrado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= FACTOR OPERACION FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= FACTOR Igual FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES Coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROPOSICION_PROCEDIMIENTO ::= Identificador Parentesis_Abierto LISTA_EXPRESIONES Parentesis_Cerrado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION_PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROPOSICION_PROCEDIMIENTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION_PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PROPOSICION ::= Si EXPRESION Entonces PROPOSICION Sino PROPOSICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PROPOSICION ::= CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROPOSICION ::= PROPOSICION_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROPOSICION ::= Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_PROPOSICIONES ::= LISTA_PROPOSICIONES Punto_y_Coma PROPOSICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PROPOSICIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_PROPOSICIONES ::= PROPOSICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PROPOSICIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= Inicio LISTA_PROPOSICIONES Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_PARAMETROS ::= LISTA_PARAMETROS Punto_y_Coma LISTA_IDENTIFICADORES Dos_Puntos TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_PARAMETROS ::= LISTA_IDENTIFICADORES Dos_Puntos TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARGUMENTOS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARGUMENTOS ::= Parentesis_Abierto LISTA_PARAMETROS Parentesis_Cerrado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ENCABEZADO_PROCESO ::= Funcion Identificador ARGUMENTOS Dos_Puntos TIPO Punto_y_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCABEZADO_PROCESO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCESO ::= ENCABEZADO_PROCESO DECLARACIONES CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCESO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES_PROCESOS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_PROCESOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES_PROCESOS ::= DECLARACIONES_PROCESOS PROCESO Punto_y_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_PROCESOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DECLARACIONES Variables LISTA_IDENTIFICADORES Dos_Puntos TIPO Punto_y_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LLAMADA_FUNCION ::= Identificador Parentesis_Abierto LISTA_IDENTIFICADORES Parentesis_Cerrado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= Programa LLAMADA_FUNCION Punto_y_Coma DECLARACIONES DECLARACIONES_PROCESOS CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

